import Cocoa

/*:
# 享元模式 -- Flyweight

## 意图
运用共享技术有效的支持大量细粒度的对象。

## 动机
有些应用程序得益于在整个设计过程当中采用对象技术，但是简化的实现代价太大（会耗用大量内存）。
 例如：文字编辑器。
 如果按照下图设计
 ![](1.png)
 那么，及时中等大小的文档可能也有成百上千的文字对象，这会消耗大量内存。Flyweight模式提供了解决方法。
 flyweight是一个共享对象，他可以同时在多个场景（Context）中使用（外部状态）。其中关键的概念是内部状态和外部状态之
 的区别。
 
 内部状态：存储在flyweight中，它包含了独立于Context的信息。这些信息可以使得flyweight被共享
 外部状态：取决于Context，随Context变化而变化。
 
 用户对象负责必要时将外部状态传递给Flyweight。
 
 还是以编辑器来说明。原来的设计
 ![](2.png)
 
 使用Flyweight模式后的设计。
 ![](3.png)
 
 类关系图：
 ![](4.png)
 

## 适用性

## 结构
![](5.png)

## 参与者

## 协作


## 效果
### 优点：

### 缺点:

## 实现

## 相关模式


## 其他知识点

*/

