
/*:
 # 代理 - Proxy
 
 ## 意图
 为其他对象提供一种代理以控制对这个对象的访问。
 
 ## 动机
 对一个对象进行访问控制的一个原因是为了只有我们确实需要这个对象的时候才对它进行创建和初始化。比如，有些图形对象（如大型图片）的创建开销就很大。但是打开文档必须很迅速，因此在打开文档时应该避免一次性创建开销很大的对象。（比如邮件附件的占位图）
 采用代理模式可以解决这样的问题。采用图像Proxy代替真正的图像。Proxy可以代替一个图像对象，并且在需要时负责实例化这个图像对象。
 
 ## 适用性
 在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。下面是使用Proxy模式的常见场景：
 1. 远程代理（Remote Proxy）：为一个对象在不同的地址空间提供局部代表
 2. 虚代理（Virtual Proxy）：根据需要创建开销很大的对象。（imageProxy）
 3. 保护代理（）
 4. 智能指引
 
 ## 结构
 
 ## 参与者
 
 ## 协作
 
 
 ## 效果
 
 ## 实现
 
 ## 相关模式
 
 
 ## 其他知识点
 
 */

import Foundation

var str = "Hello, playground"
